purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, loss = x)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, cost = x)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, cost = x)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, list(loss = x))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, list(loss = x))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, list(loss = x))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
prp(tree)
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(german$default))
x
x[3] = 3
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
prp(tree)
fit = predict(tree, type = "class")
fit2 = predict(tree, type = "class", newdata = german[, -1])
confusionMatrix(fit, as.factor(german$default))
x
tree$parms
x
x[3] = 1
x[2] = 2
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
prp(tree)
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(german$default))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x), minbucket=0)
prp(tree)
confusionMatrix(fit, as.factor(german$default))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x), minbucket=0)
prp(tree)
fit = predict(tree, type = "class")
fit2 = predict(tree, type = "class", newdata = german[, -1])
confusionMatrix(fit, as.factor(german$default))
x[2]
x[2] = 3
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x), minbucket=0)
prp(tree)
fit = predict(tree, type = "class")
fit2 = predict(tree, type = "class", newdata = german[, -1])
confusionMatrix(fit, as.factor(german$default))
x[2]
x[2] = 4
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x), minbucket=0)
prp(tree)
fit = predict(tree, type = "class")
fit2 = predict(tree, type = "class", newdata = german[, -1])
confusionMatrix(fit, as.factor(german$default))
x
x[2] = 10
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x), minbucket=0)
prp(tree)
fit = predict(tree, type = "class")
fit2 = predict(tree, type = "class", newdata = german[, -1])
confusionMatrix(fit, as.factor(german$default))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
prp(tree)
fit = predict(tree, type = "class")
fit2 = predict(tree, type = "class", newdata = german[, -1])
confusionMatrix(fit, as.factor(german$default))
tree$control
tree$functions
tree$numresp
tree$splits
tree$variable.importance
tree$y
tree$ordered
tree$variable.importance
summary(tree)
tree$variable.importance
summary(tree)
summary(tree)
tree$variable.importance
sum(tree$variable.importance)
a = summary(tree)
a
a = summary(tree)
a
summary.rpart(tree)
summary.rpart(tree)
summary(tree)
tree$variable.importance
sum(tree$variable.importance)
###################
german = read.csv("german_credit.csv")
str(german)
###################
german = read.csv("german_credit.csv")
knitr::opts_chunk$set(collapse = TRUE, warnings = FALSE, echo = TRUE)
path = "C:/Users/Bruno Ferrari/Documents/2019/Estagio/BlogAndre/data_fintech_solutions/datasets/german/german_credit.csv"
german = read.csv(path)
str(german)
setwd("~/2019/Estagio/BlogAndre/data_fintech_solutions/datasets/german")
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
library(rpart)
library(rpart.plot)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
prp(tree)
fit = predict(tree, type = "class")
tree$variable.importance
library("rpart")
library("rpart.plot")
library("caTools")
split = sample.split(german$default, SplitRatio = 0.7)
train = subset(boston, split==TRUE)
split = sample.split(german$default, SplitRatio = 0.7)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
tree
tree$y
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class"
, parms =  list(loss = x))
tree$y
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(german$default))
library("rpart")
library("rpart.plot")
library("caTools")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(german$default))
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
library("caret")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
split = sample.split(german$default, SplitRatio = 0.7)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
split = sample.split(german$default, SplitRatio = 0.7)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
split = sample.split(german$default, SplitRatio = 0.7)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit, as.factor(test$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.7)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.75)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.8)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.6)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.5)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.9)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
split = sample.split(german$default, SplitRatio = 0.9)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
split = sample.split(german$default, SplitRatio = 0.75)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(german$default))
split = sample.split(german$default, SplitRatio = 0.75)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
prp(tree)
tree
knitr::opts_chunk$set(collapse = TRUE, warnings = FALSE, echo = TRUE)
path = "C:/Users/Bruno Ferrari/Documents/2019/Estagio/BlogAndre/data_fintech_solutions/datasets/german/german_credit.csv"
german = read.csv(path)
str(german)
library("rpart")
library("rpart.plot")
library("caTools")
library("caret")
library("e1071")
split = sample.split(german$default, SplitRatio = 0.75)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
prp(tree)
tree
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
library("rpart")
library("rpart.plot")
library("caTools")
library("caret")
#library("e1071")
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
cost_matrix = matrix(c(0,1,2,0), nrow=2, ncol = 2)
cost_matrix = matrix(c(0,1,2,0), nrow=2, ncol = 2)
cost_matrix
cost_matrix = matrix(c(0,2,1,0), nrow=2, ncol = 2)
cost_matrix
tree_p = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = german, method = "class",
parms =  list(loss = cost_matrix))
fit = predict(tree_p, type = "class")
confusionMatrix(fit, as.factor(train$default))
tree_p = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class",
parms =  list(loss = cost_matrix))
fit = predict(tree_p, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree_p, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
knitr::opts_chunk$set(collapse = TRUE, warnings = FALSE, echo = TRUE)
path = "C:/Users/Bruno Ferrari/Documents/2019/Estagio/BlogAndre/data_fintech_solutions/datasets/german/german_credit.csv"
german = read.csv(path)
str(german)
library("rpart")
library("rpart.plot")
library("caTools")
library("caret")
#library("e1071")
split = sample.split(german$default, SplitRatio = 0.75)
train = subset(german, split==TRUE)
test = subset(german, split==FALSE)
tree = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class")
prp(tree)
tree
fit = predict(tree, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
cost_matrix = matrix(c(0,2,1,0), nrow=2, ncol = 2)
cost_matrix
tree_p = rpart(default ~ account_check_status + duration_in_month + credit_history +
purpose + credit_amount + savings + present_emp_since +
installment_as_income_perc + personal_status_sex + other_debtors + present_res_since +
property + age + other_installment_plans + housing +
credits_this_bank + job + people_under_maintenance + telephone + foreign_worker, data = train, method = "class",
parms =  list(loss = cost_matrix))
fit = predict(tree_p, type = "class")
confusionMatrix(fit, as.factor(train$default))
fit_test = predict(tree_p, type = "class", newdata = test[,-1])
confusionMatrix(fit_test, as.factor(test$default))
data_risk = german$default
data = german
y = sapply(dados, is.numeric)
data_risk = german$default
data = german
y = sapply(data, is.numeric)
which(y)
dados = read.csv("german_credit.csv")
y = sapply(dados, is.numeric)
which(y)
library("fastDummies")
results <- dummy_columns(data, names(data[, -1:-3]))
data_dummy = results[ , -4:-20]
data_risk = german$default
data = german[, -1]
data = cbind(data[, c(2,5,13)], data[ , -c(2,5,13)])
library("fastDummies")
results <- dummy_columns(data, names(data[, -1:-3]))
data_dummy = results[ , -4:-20]
pca = prcomp(dados_tr)
pca = prcomp(data_dummy)
summary(pca)
plot(pca$x[, c(1,2)])
points(pca$x[which(dados_labels == 1), c(1,2)], col = "red", pch =20
points(pca$x[which(dados_labels == 0), c(1,2)], col = "blue", pch =20)
plot(pca$x[, c(1,2)])
points(pca$x[which(dados_labels == 1), c(1,2)], col = "red", pch =20)
plot(pca$x[, c(1,2)])
points(pca$x[which(data_risk == 1), c(1,2)], col = "red", pch =20)
points(pca$x[which(data_risk == 0), c(1,2)], col = "blue", pch =20)
plot(pca$x[, c(1,2)])
points(pca$x[which(data_risk == 1), c(1,2)], col = "red", pch =10)
points(pca$x[which(data_risk == 0), c(1,2)], col = "blue", pch =10)
plot(pca$x[, c(1,2)])
points(pca$x[which(data_risk == 1), c(1,2)], col = "red", pch =5)
points(pca$x[which(data_risk == 0), c(1,2)], col = "blue", pch =5)
plot(pca$x[, c(1,2)])
points(pca$x[which(data_risk == 1), c(1,2)], col = "red", pch =20)
points(pca$x[which(data_risk == 0), c(1,2)], col = "blue")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
