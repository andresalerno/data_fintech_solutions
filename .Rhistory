df <- data.frame(col1 = c("abc","abcd","a","abcdefg"),col2 = c("adf qqwe","d","e","f"))
for(i in names(df)){
df[[paste(i, 'length', sep="_")]] <- str_length(df[[i]])
}
View(df)
library(stringr)
out <- lapply( df , str_length )
df <- cbind( df , out )
View(df)
any(is.na(dados$DATA_FUNDACAO)) # checking NULLs
index_dt_fundacao_nulls <- which(is.na(dados$DATA_FUNDACAO)) # Locate NULLs
length(index_dt_fundacao_nulls) # number of NULLs
if (dados$DATA_FUNDACAO !NA){
any(is.na(dados$DATA_FUNDACAO)) # checking NULLs
index_dt_fundacao_nulls <- which(is.na(dados$DATA_FUNDACAO)) # Locate NULLs
length(index_dt_fundacao_nulls) # number of NULLs
if (dados$DATA_FUNDACAO == !NA){
mutate_all(tempo_fundacao = (Sys.Date() - DATA_FUNDACAO) / 365)
} else{
mutate_all(tempo_fundacao = "")
}
any(is.na(dados$DATA_FUNDACAO)) # checking NULLs
index_dt_fundacao_nulls <- which(is.na(dados$DATA_FUNDACAO)) # Locate NULLs
length(index_dt_fundacao_nulls) # number of NULLs
if (dados$DATA_FUNDACAO == !NA){
mutate_all(tempo_fundacao = (Sys.Date() - DATA_FUNDACAO) / 365)
} else{
mutate_all(tempo_fundacao = "")
}
a <- rnorm(100, 5, 2)
a
b <- rnorm(200, 20, 4)
df <- data.frame(a, b)
df
df %>%
mutate(c = a * b)
df
df
df %>%
mutate_all(c = a * b)
df %>%
mutate_all(c = a * b)
df
df %>%
mutate_all(.funs = a * b)
df
df %>%
mutate(c = a * b)
df
df %>%
df <- mutate(c = a * b)
df %>%
df <- mutate(c = a * b)
df %>%
mutate(c = a * b)
df %>%
mutate(c = a * b) %>%
df
dados %>%
as.tibble() %>%
mutate(
tempo_fundacao = (Sys.Date() - dados$DATA_FUNDACAO) / 365, na.rm = TRUE))
dados %>%
as.tibble() %>%
mutate(
tempo_fundacao = ((Sys.Date() - dados$DATA_FUNDACAO) / 365), na.rm = TRUE))
install.packages("blogdown")
options(blogdown.ext = ".Rmd", blogdown.author = "Andr√© Salerno, MSc")
blogdown:::new_post_addin()
setwd("C:/blogdown")
blogdown:::new_post_addin()
setwd("C:/blogdown")
library(reticulate)
path <- file.path(Sys.which("python"))
use_python(python = path)
library(reticulate)
path <- file.path(Sys.which("python"))
use_python(python = path)
library(reticulate)
path <- file.path(Sys.which("python"))
use_python(python = path)
setwd("C:/blogdown")
getwd()
library(reticulate)
path <- file.path(Sys.which("python"))
use_python(python = path)
blogdown::serve_site()
blogdown::serve_site
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
<<<<<<< HEAD
blogdown::serve_site()
=======
>>>>>>> d2d56c0982ec5e4c28d939de01264732175aadb2
blogdown::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post()
blogdown::new_post(title = "Supervised Learning in R: Classification")
blogdown::new_post(title = "Supervised Learning in R: Classification", ext = 'Rmd')
blogdown::new_post(title = "Supervised Learning in R: Classification", ext = '.Rmd')
blogdown::new_post(title = "Supervised Learning in R: Classification", ext = '.Rmd')
knitr::opts_chunk$set(collapse = TRUE, warnings = FALSE, echo = TRUE)
knitr::include_graphics("temp.png")
getawd()
getwd()
knitr::include_graphics("/data_fintech_solutions/temp.png")
install.packages("class")
load("/data_fintech_solutions/knn_trafic_signs.csv")
df <- read.csv("/data_fintech_solutions/knn_trafic_signs.csv")
df <- read.csv("/data_fintech_solutions/knn_trafic_signs.csv")
df <- read.csv("knn_trafic_signs.csv")
df <- read.csv(file = knn_trafic_signs.csv)
df <- read.csv(file = "knn_trafic_signs.csv")
getwd()
df <- read.csv(file = "knn_traffic_signs.csv")
df <- read.csv(file = "knn_traffic_signs.csv")
df <- read.csv(file = "./knn_traffic_signs.csv")
df <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
df <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
names(df)
head(df)
summary(df)
class(df)
names(df)
df <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
names(df)
head(df)
summary(df)
class(df)
names(df)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
names(signs)
head(signs)
summary(signs)
class(signs)
names(signs)
signs <- signs[, c(, 4:51)]
signs <- signs[, 4:51]
head(signs)
ncol(signs)
next_sign <- signs[, 4:51]
next_sign <- signs[, 4:51]
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
names(signs)
summary(signs)
class(signs)
next_sign <- signs[, 4:51]
head(next_sign)
ncol(next_sign)
ncol(next_sign)
names(next_sign)
# Create a vector of labels
sign_types <- signs$sign_type
# Classify the next sign observed
knn(train = signs[-1], test = next_sign, cl = sign_types)
# Classify the next sign observed
knn(class::train = signs[-1], test = next_sign, cl = sign_types)
# Classify the next sign observed
class::knn(train = signs[-1], test = next_sign, cl = sign_types)
library(class)
# Classify the next sign observed
knn(train = signs[-1], test = next_sign, cl = sign_types)
next_sign
# Classify the next sign observed
knn(train = signs[-1], test = next_sign[206, ], cl = sign_types)
nrow(sign)
nrow(signs)
nrow(next_sign)
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
next_sign <- signs[-1, 4:51]
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
head(next_sign)
names(next_sign)
names(signs)
sign <- signs[-1, 4:51]
signs <- signs[-1, 4:51]
head(signs)
ncol(signs)
names(signs)
# Create a vector of labels
sign_types <- signs$sign_type
next_sign <- signs[-1]
nrow(next_sign)
next_sign <- signs[1]
nrow(next_sign)
next_sign <- signs[-1, ]
nrow(next_sign)
dim(signs)
names(signs)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
names(signs)
ncol(signs)
nrow(signs)
dim(signs)
names(signs)
signs_colum_selected <- signs[, 4:51]
ncol(signs_colum_selected)
names(signs_colum_selected)
dim(signs_colum_selected)
# Create a vector of labels
sign_types <- signs$sign_type
sign_types
dim(sign_types)
nrow(sign_types)
class(sign_types)
str(sign_types)
summary(sign_types)
library(class)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
install.packages("googledrive")
install.packages("psych")
library(class)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
signs <- signs[, 4:51]
head(signs)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
signs <- signs[, 3:51]
head(signs)
names(signs)
library(class)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
signs <- signs[1:146, 3:51]
head(signs)
names(signs)
dim(signs)
signs[-1]
signs[-2]
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
signs <- sample(signs[1:146, 3:51])
dim(signs)
head(signs)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
signs <- signs[-206, 3:51]
dim(signs)
(signs)
names(signs)
sign_types <- signs$sign_type
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
next_sign <- signs[206]
next_sign <- signs[206,]
next_sign
print(next_sign)
next_sign
View(next_sign)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
dim(signs)
names(signs)
next_sign <- signs[206, 3:51]
next_sign
signs <- signs[-206, 3:51]
sign_types <- signs$sign_type
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
# Classify the next sign observed
knn(train = signs[-1], test = next_sign, cl = sign_types)
dim(signs[-1])
dim(next_sign)
names(signs) == names(next_sign)
# Create a vector of labels
sign_types <- signs$sign_type
sign_types
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv")
sign_types <- signs$sign_type[-206]
next_sign <- signs[206, 3:51]
next_sign
signs <- signs[-206, 3:51]
# Classify the next sign observed
knn(train = signs, test = next_sign, cl)
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
dim(signs)
dim(next_sign)
dim(sign_types)
summary(sign_types)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ";")
dim(signs)
names(signs)
View(df)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ";")
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ",")
dim(signs)
names(signs)
# Create a vector of labels
sign_types <- signs$sign_type[-206]
next_sign <- signs[206, 3:51]
signs <- signs[-206, 3:51]
head(signs)
signs <- signs[-206, 3:51]
library(class)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ",")
dim(signs)
names(signs)
# Create a vector of labels
sign_types <- signs$sign_type[-206]
next_sign <- signs[206, 3:51]
next_sign
signs <- signs[-206, 3:51]
head(signs)
names(signs)
dim(signs)
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
sign[206]
signs[206]
signs[206,
]
sign_types
dim(sign_types)
next_sign
dim(next_sign)
names(signs) == names(next_sign)
sign_types
# Classify the next sign observed
knn(train = signs, test = next_sign, cl = sign_types)
head(signs)
# Classify the next sign observed
knn(train = signs[-1], test = next_sign, cl = sign_types)
next
next_sign
# Classify the next sign observed
knn(train = signs[-1], test = next_sign[-1], cl = sign_types)
knitr::include_graphics("/data_fintech_solutions/temp1.png")
knitr::include_graphics("/data_fintech_solutions/temp_1.png")
# Examine the structure of the signs dataset
str(signs)
# Count the number of signs of each type
table(signs$sign_type)
# Check r10's average red level by sign type
aggregate(r10 ~ sign_type, data = signs, mean)
knitr::include_graphics("/data_fintech_solutions/temp_2.png")
knitr::include_graphics("/data_fintech_solutions/temp_2.png")
knitr::include_graphics("/data_fintech_solutions/temp_2.png")
knitr::include_graphics("/data_fintech_solutions/temp_3.png")
knitr::include_graphics("/data_fintech_solutions/temp_2.png")
knitr::include_graphics("/data_fintech_solutions/temp_3.png")
knitr::include_graphics("/data_fintech_solutions/temp_4.png")
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ",")
# get the number of observations
n_obs <- nrow(signs)
# Shuffle row indices: permuted_rows
permuted_rows <- sample(n_obs)
library(class)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ",")
dim(signs)
names(signs)
# Identify row to split on: split
split <- round(n_obs * 0.7)
# Create train
train <- signs_shuffled[1:split, ]
# Randomly order data: signs_shuffled
signs_shuffled <- signs[permuted_rows, ]
# Identify row to split on: split
split <- round(n_obs * 0.7)
# Create train
train <- signs_shuffled[1:split, ]
# Create test
test <- signs_shuffled[(split + 1):n_obs, ]
View(signs_shuffled)
# Create train
train <- signs_shuffled[1:split, 3:51]
View(train)
# Create test
test <- signs_shuffled[(split + 1):n_obs, 3:51]
# Create a vector of labels
sign_types <- signs_shuffled$sign_type[-206]
next_sign <- signs_shuffled[206, 3:51]
next_sign <- signs_shuffled[206, 3:51]
next_sign
# Classify the next sign observed
knn(train = train, test = test, cl = sign_types)
# Create a vector of labels
sign_types <- signs_shuffled$sign_type[1:split]
# Classify the next sign observed
knn(train = train, test = test, cl = sign_types)
View(train)
View(test)
library(class)
signs <- read.csv(file = "/data_fintech_solutions/knn_traffic_signs.csv", header = TRUE, sep = ",")
dim(signs)
names(signs)
# get the number of observations
n_obs <- nrow(signs)
# Shuffle row indices: permuted_rows
permuted_rows <- sample(n_obs)
# Randomly order data: signs_shuffled
signs_shuffled <- signs[permuted_rows, ]
# Identify row to split on: split
split <- round(n_obs * 0.7)
# Create train
train <- signs_shuffled[1:split, 4:51]
View(train)
# Create test
test <- signs_shuffled[(split + 1):n_obs, 4:51]
# Create a vector of labels
sign_types <- signs_shuffled$sign_type[1:split]
dim(sign_types)
str(sign_types)
summary(sign_types)
next_sign <- signs_shuffled[206, 4:51]
next_sign
# Classify the next sign observed
knn(train = train, test = test, cl = sign_types)
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$sign_type
# Classify the next sign observed
signs_pred <- knn(train = train, test = test, cl = sign_types)
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$sign_type
table(signs_actual, signs_pred)
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$signs_type
table(signs_actual, signs_pred)
View(test)
# get the number of observations
n_obs <- nrow(signs)
# Shuffle row indices: permuted_rows
permuted_rows <- sample(n_obs)
# Randomly order data: signs_shuffled
signs_shuffled <- signs[permuted_rows, ]
# Identify row to split on: split
split <- round(n_obs * 0.7)
# Create train
train <- signs_shuffled[1:split, 3:51]
# Create test
test <- signs_shuffled[(split + 1):n_obs, 3:51]
# Create a vector of labels
sign_types <- signs_shuffled$sign_type[1:split]
next_sign <- signs_shuffled[206, 3:51]
# Classify the next sign observed
signs_pred <- knn(train = train[-1], test = test[-1], cl = sign_types)
# Examine the structure of the signs dataset
str(signs)
# Count the number of signs of each type
table(signs$sign_type)
# Check r10's average red level by sign type
aggregate(r10 ~ sign_type, data = signs, mean)
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$signs_type
table(signs_actual, signs_pred)
View(test)
dim(test)
dim(train)
signs_pred
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$signs_type
test$sign_type
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$sign_type
table(signs_actual, signs_pred)
# Compute the accuracy
mean(signs_actual == signs_pred)
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test$sign_type
table(signs_actual, signs_pred)
# Compute the accuracy
mean(signs_actual == signs_pred)
# Compute the accuracy of the baseline model (default k = 1)
k_1 <- knn(train = train[-1], test = test[-1], cl = sign_types)
mean(signs_actual == k_1)
# Modify the above to set k = 7
k_7 <- knn(train = train[-1], test = test[-1], cl = sign_types, k = 7)
mean(signs_actual == k_7)
# Set k = 15 and compare to the above
k_15 <- knn(train = train[-1], test = test[-1], cl = sign_types, k = 15)
mean(signs_actual == k_15)
# Use the prob parameter to get the proportion of votes for the winning class
sign_pred <- knn(train = train[-1], test = test[-1], cl= sign_types, k = 7, prob = TRUE)
# Get the "prob" attribute from the predicted classes
sign_prob <- attr(sign_pred, "prob")
# Examine the first several predictions
head(sign_pred)
# Examine the proportion of votes for the winning class
head(sign_prob)
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
run servr::daemon_stop(1)
servr::daemon_stop(1)
blogdown::serve_site()
knitr::include_graphics("/data_fintech_solutions/public/img/banners/temp.png")
knitr::include_graphics("/data_fintech_solutions/public/img/banners/temp_1.png")
knitr::include_graphics("/data_fintech_solutions/public/img/banners/temp_2.png")
knitr::include_graphics("/data_fintech_solutions/public/img/banners/temp_3.png")
knitr::include_graphics("/data_fintech_solutions/public/img/banners/temp_4.png")
install.packages("magick")
library(magick)
