<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on DFS</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on DFS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Supervised Learning in R: Classification</title>
      <link>/blog/2020/08/19/2020-08-19-supervised-learning-in-r-classification/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/08/19/2020-08-19-supervised-learning-in-r-classification/</guid>
      <description>Chapter 1 - k-Nearest Neighbors (kNN)1.1 - Recognizing a road sign with kNNAfter several trips with a human behind the wheel, it is time for the self-driving car to attempt the test course alone.
As it begins to drive away, its camera captures the following image:
Figure 1: A captionCan you apply a kNN classifier to help the car recognize this sign?
The dataset signs must be loaded in your workspace along with the dataframe next_sign, which holds the observation you want to classify.</description>
    </item>
    
    <item>
      <title>Deploying R Model as API Web Service using Docker and Microsoft Azure</title>
      <link>/blog/2020/04/22/2020-04-22-deploying-r-model/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/04/22/2020-04-22-deploying-r-model/</guid>
      <description>ObjectiveOur goal here is to create a R Model and put-in into production by deploying it as web service API using Docker to containerize (encapsulate) it and Microsoft Azure to host it.
R ModelTo create the model, we going to use mtcars dataset which one’s is present inside R.
head(mtcars)## mpg cyl disp hp drat wt qsec vs am gear carb## Mazda RX4 21.0 6 160 110 3.</description>
    </item>
    
    <item>
      <title>Credit Card Fraud Detection</title>
      <link>/blog/2020/03/26/2020-03-26-credit-card-fraud-detection/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/26/2020-03-26-credit-card-fraud-detection/</guid>
      <description>ObjectiveOur goal is to train a Neural Network to detect fraudulent credit card transactions in a dataset referring to two days transactions by european cardholders.
Source: https://www.kaggle.com/mlg-ulb/creditcardfraud/data
Datacredit = read.csv(path)The datasets contains transactions made by credit cards in September 2013 by european cardholders.This dataset presents transactions that occurred in two days.
As we can see, this dataset consists of thirty explanatory variables, and a response variable which represents whether a transation was a fraud or not.</description>
    </item>
    
    <item>
      <title>Intermediate Importing Data in Python</title>
      <link>/blog/2020/03/21/2020-03-21-intermediate-importing-data-in-python/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/21/2020-03-21-intermediate-importing-data-in-python/</guid>
      <description>1. Importing flat files from the web: your turn!# Import packagefrom urllib.request import urlretrieve# Import pandasimport pandas as pd# Assign url of file: urlurl = &amp;#39;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&amp;#39;# Save file locallyurlretrieve(url, &amp;#39;winequality-red.csv&amp;#39;)# Read file into a DataFrame and print its head## (&amp;#39;winequality-red.csv&amp;#39;, &amp;lt;http.client.HTTPMessage object at 0x000000001FBF52C8&amp;gt;)df = pd.read_csv(&amp;#39;winequality-red.csv&amp;#39;, sep=&amp;#39;;&amp;#39;)print(df.head())## fixed acidity volatile acidity citric acid ... sulphates alcohol quality## 0 7.</description>
    </item>
    
    <item>
      <title>Introduction to Importing Data in Python</title>
      <link>/blog/2020/03/19/2020-03-19-introduction-to-importing-data-in-python/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/19/2020-03-19-introduction-to-importing-data-in-python/</guid>
      <description>1. Importing entire text files# Open a file: filefile = open(&amp;#39;c:/blogdown/moby_dick.txt&amp;#39;, mode=&amp;#39;r&amp;#39;)# Print itprint(file.read())# Check whether file is closed## CHAPTER 1. Loomings.## ## Call me Ishmael. Some years ago--never mind how long precisely--having## little or no money in my purse, and nothing particular to interest me on## shore, I thought I would sail about a little and see the watery part of## the world.</description>
    </item>
    
    <item>
      <title>Supervised Learning with Scikit-Learn</title>
      <link>/blog/2020/03/18/2020-03-18-supervised-learning-with-scikit-learn/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/18/2020-03-18-supervised-learning-with-scikit-learn/</guid>
      <description>1. The Iris dataset in scikit-learnfrom sklearn import datasetsimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltplt.style.use(&amp;#39;ggplot&amp;#39;)iris = datasets.load_iris()type(iris)## &amp;lt;class &amp;#39;sklearn.utils.Bunch&amp;#39;&amp;gt;print(iris.keys())## dict_keys([&amp;#39;data&amp;#39;, &amp;#39;target&amp;#39;, &amp;#39;target_names&amp;#39;, &amp;#39;DESCR&amp;#39;, &amp;#39;feature_names&amp;#39;, &amp;#39;filename&amp;#39;])print(iris.DESCR)## .. _iris_dataset:## ## Iris plants dataset## --------------------## ## **Data Set Characteristics:**## ## :Number of Instances: 150 (50 in each of three classes)## :Number of Attributes: 4 numeric, predictive attributes and the class## :Attribute Information:## - sepal length in cm## - sepal width in cm## - petal length in cm## - petal width in cm## - class:## - Iris-Setosa## - Iris-Versicolour## - Iris-Virginica## ## :Summary Statistics:## ## ============== ==== ==== ======= ===== ====================## Min Max Mean SD Class Correlation## ============== ==== ==== ======= ===== ====================## sepal length: 4.</description>
    </item>
    
    <item>
      <title>Python Data Science - part 1</title>
      <link>/blog/2020/03/15/2020-03-15-python-data-science-part-1/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/15/2020-03-15-python-data-science-part-1/</guid>
      <description>1. Single Parameter Function# Define shout with the parameter, worddef shout(word):&amp;quot;&amp;quot;&amp;quot;Print a string with three exclamation marks&amp;quot;&amp;quot;&amp;quot;# Concatenate the strings: shout_wordshout_word = word + &amp;#39;!!!&amp;#39;# Print shout_wordprint(shout_word)# Call shout with the string &amp;#39;congratulations&amp;#39;shout(&amp;quot;Congratulations&amp;quot;)## Congratulations!!!2. Functions that return single values# Define shout with the parameter, worddef shout(word):&amp;quot;&amp;quot;&amp;quot;Return a string with three exclamation marks&amp;quot;&amp;quot;&amp;quot;# Concatenate the strings: shout_wordshout_word = word + &amp;quot;!</description>
    </item>
    
    <item>
      <title>Linear Models - Scikit Learn</title>
      <link>/blog/2020/03/14/2020-03-14-linear-models-scikit-learn/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/14/2020-03-14-linear-models-scikit-learn/</guid>
      <description>1. Linear ModelsThe target value is expected to be a linear combination of the features.
1.1. Ordinary Least Squares (OLS)The OLS is a optimization math technique that aim to find the better adjustment for a set data and try to minimize the residual sum of squares between the observed targets in the dataset and the targets predicted by the linear approximation.
from sklearn import linear_modelreg = linear_model.</description>
    </item>
    
    <item>
      <title>TensorFlow 2 - Quickstart for Beginners</title>
      <link>/blog/2020/03/14/2020-03-14-tensorflow-2-quickstart-for-beginners/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/14/2020-03-14-tensorflow-2-quickstart-for-beginners/</guid>
      <description>from __future__ import absolute_import, division, print_function, unicode_literalsimport tensorflow as tfmnist = tf.keras.datasets.mnist(x_train, y_train), (x_test, y_test) = mnist.load_data()x_train, x_test = x_train / 255.0, x_test / 255.0model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28, 28)),tf.keras.layers.Dense(128, activation=&amp;#39;relu&amp;#39;),tf.keras.layers.Dropout(0.2),tf.keras.layers.Dense(10)])predictions = model(x_train[:1]).numpy()## WARNING:tensorflow:Layer flatten is casting an input tensor from dtype float64 to the layer&amp;#39;s dtype of float32, which is new behavior in TensorFlow 2.</description>
    </item>
    
    <item>
      <title>Iterables versus Iterators</title>
      <link>/blog/2020/03/09/2020-03-09-iterables-versus-iterators/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/09/2020-03-09-iterables-versus-iterators/</guid>
      <description>1. Defining a listflash1 = [&amp;#39;jay garrick&amp;#39;, &amp;#39;barry allen&amp;#39;, &amp;#39;wally west&amp;#39;, &amp;#39;bart allen&amp;#39;]a = 1</description>
    </item>
    
    <item>
      <title>A Game of Chance</title>
      <link>/blog/2020/02/29/2020-02-29-a-game-of-chance/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/02/29/2020-02-29-a-game-of-chance/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot;Simulating the dice game Craps&amp;quot;&amp;quot;&amp;quot;## &amp;#39;Simulating the dice game Craps&amp;#39;import randomdef roll_dice():&amp;quot;&amp;quot;&amp;quot;Roll two dice and return their face values as a tuple.&amp;quot;&amp;quot;&amp;quot;die1 = random.randrange(1,7)die2 = random.randrange(1,7)return (die1, die2)def display_dice(dice):&amp;quot;&amp;quot;&amp;quot;Display one roll of the two dice.&amp;quot;&amp;quot;&amp;quot;die1, die2 = diceprint(f&amp;#39;Player rolled {die1} + {die2} = {sum(dice)}&amp;#39;)die_values = roll_dice() #first rolldisplay_dice(die_values)# determine game status and point, based on first roll.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>/blog/2020/02/29/2020-03-01-functions/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/02/29/2020-03-01-functions/</guid>
      <description>1. Defining functionsdef square(number):print(&amp;quot;The square of&amp;quot;, number, &amp;quot;is&amp;quot;, number ** 2)square(7)## The square of 7 is 492. Functions with multiple parametersdef maximum(value1, value2, value3):max_value = value1if value2 &amp;gt; max_value:max_value = value2if value3 &amp;gt; max_value:max_value = value3return max_valuemaximum(12, 27, 36)## 36maximum(&amp;#39;yellow&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;orange&amp;#39;)## &amp;#39;yellow&amp;#39;3. Random-Number Generationimport randomrandom.</description>
    </item>
    
    <item>
      <title>German Credit and Regression Tree</title>
      <link>/blog/2020/02/07/2020-02-07-german-credit-and-regression-tree/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/02/07/2020-02-07-german-credit-and-regression-tree/</guid>
      <description>ObjetiveTrain a model and use to make predictions for German Credit dataset
Datagerman = read.csv(path)str(german)## &amp;#39;data.frame&amp;#39;: 1000 obs. of 21 variables:## $ default : int 0 1 0 0 1 0 0 0 0 1 ...## $ account_check_status : Factor w/ 4 levels &amp;quot;&amp;lt; 0 DM&amp;quot;,&amp;quot;&amp;gt;= 200 DM / salary assignments for at least 1 year&amp;quot;,..: 1 3 4 1 1 4 4 3 4 3 .</description>
    </item>
    
    <item>
      <title>Correlation and Regression</title>
      <link>/blog/2020/01/19/2020-01-19-correlation-and-regression/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/01/19/2020-01-19-correlation-and-regression/</guid>
      <description>path &amp;lt;- &amp;quot;C:/Users/andre/OneDrive/Área de Trabalho/salerno/blogdown/datasets/ncbirths&amp;quot;path &amp;lt;- paste0(path, &amp;quot;/ncbirths.csv&amp;quot;)data &amp;lt;- read.csv(path, stringsAsFactors = FALSE)dim(data)## [1] 1450 15names(data)## [1] &amp;quot;ID&amp;quot; &amp;quot;Plural&amp;quot; &amp;quot;Sex&amp;quot; &amp;quot;MomAge&amp;quot; ## [5] &amp;quot;Weeks&amp;quot; &amp;quot;Marital&amp;quot; &amp;quot;RaceMom&amp;quot; &amp;quot;HispMom&amp;quot; ## [9] &amp;quot;Gained&amp;quot; &amp;quot;Smoke&amp;quot; &amp;quot;BirthWeightOz&amp;quot; &amp;quot;BirthWeightGm&amp;quot;## [13] &amp;quot;Low&amp;quot; &amp;quot;Premie&amp;quot; &amp;quot;MomRace&amp;quot;library(ggplot2)ggplot(data = data, aes(y = BirthWeightOz, x = Weeks)) +geom_point()## Warning: Removed 1 rows containing missing values (geom_point).# Boxplot of weight vs.</description>
    </item>
    
    <item>
      <title>Classifying using Logistic Regression</title>
      <link>/blog/2020/01/13/2020-01-13-classifying-using-logistic-regression/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/01/13/2020-01-13-classifying-using-logistic-regression/</guid>
      <description>1 - ObjectiveThe objective of this example is to identify each of a number of benign or malignant classes.
2 - DataLet’s getting the data.
BCData &amp;lt;- read.table(url(&amp;quot;https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data&amp;quot;), sep = &amp;quot;,&amp;quot;)# setting column namesnames(BCData)&amp;lt;- c(&amp;#39;Id&amp;#39;, &amp;#39;ClumpThickness&amp;#39;, &amp;#39;CellSize&amp;#39;,&amp;#39;CellShape&amp;#39;, &amp;#39;MarginalAdhesion&amp;#39;,&amp;#39;SECellSize&amp;#39;, &amp;#39;BareNuclei&amp;#39;,&amp;#39;BlandChromatin&amp;#39;,&amp;#39;NormalNucleoli&amp;#39;,&amp;#39;Mitoses&amp;#39;,&amp;#39;Class&amp;#39;)3 - EDA - Exploratory Data AnalysisIt’s important to extract prelimionary knowledge from the dataset.
dim(BCData)## [1] 699 11str(BCData)## &amp;#39;data.</description>
    </item>
    
    <item>
      <title>Diagnosing breast cancer with the kNN algorithm</title>
      <link>/blog/2020/01/05/2020-01-05-knn-algorithm/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/01/05/2020-01-05-knn-algorithm/</guid>
      <description>1 - IntroductionCould the Machine Learning Algorithms detect beforehand any abnormal cell process?
We know that this clinical battle is not so easy and there are a lot of people envolved in this process trying to identify a clear path to the cure.
In complement to the decision human process, coult the technology decrease the subjective bias inherently in the process and improve our decisions?
We absolutely know that the human being process is limited when compared to high capacity of the computers.</description>
    </item>
    
    <item>
      <title>Binary Search Algorithm</title>
      <link>/blog/2019/12/28/2019-12-28-binary-search/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/28/2019-12-28-binary-search/</guid>
      <description>def binary_search(lista, item):low = 0 # low and high are part of the list thar you are searching forhigh = len(lista) - 1while low &amp;lt;= high: #while you are not achieving one unique elementmiddle = (low + high) // 2 # checking the central elementguess = lista[middle]if guess == item:return middleif guess &amp;gt; item: # the guess are too highhigh = middle - 1else: # the guess are too lowlow = middle + 1return Nonemy_list = [1, 3, 5, 7, 9]print(binary_search(my_list, 3))## 1print(binary_search(my_list, -1))## None</description>
    </item>
    
    <item>
      <title>Quicksort Algorithm</title>
      <link>/blog/2019/12/26/2019-12-27-quicksort-algorithm/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/26/2019-12-27-quicksort-algorithm/</guid>
      <description>def quicksort(array):if len(array) &amp;lt; 2:return arrayelse:pivo = array[0] # caso recursivomenores = [i for i in array [1:] if i &amp;lt;= pivo] # subarray de todos os elementos menores do que o pivomaiores = [i for i in array[1:] if i &amp;gt; pivo] # subarray de todos os elementos maiores do que o pivoreturn quicksort(menores) + [pivo] + quicksort(maiores)print(quicksort([10, 5, 2, 3]))## [2, 3, 5, 10]</description>
    </item>
    
    <item>
      <title>R Packages for Regression</title>
      <link>/blog/2019/12/23/2019-12-23-r-packages-for-regression/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/23/2019-12-23-r-packages-for-regression/</guid>
      <description>R Packages for RegressionFor this post we will present some valuable R packages for using in regression studies. Check it out!
statsPackage very useful for statistical calculations and random number generations.
Below you can find the most useful function in regression area:
lm(): it is used to fit linear models
summary.lm(): thsi function returns a summary for linear model fits
coef(): it is possible obtain the coefficients from modeling functions</description>
    </item>
    
    <item>
      <title>Random Forest</title>
      <link>/blog/2019/12/23/2019-12-23-random-forest/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/23/2019-12-23-random-forest/</guid>
      <description>Random ForestIn this post we will explore some ideas around the Random Forest model
ObjectiveWe are working on in the dataset called Boston Housing and the main idea here is regression task and we are concerned with modeling the price of houses in thousands of dollars in the Surburb of Boston.
So, we are dirting our hands in a regression predictive modeling problem.
The main goal here is to fit a regression model that best explains the variation in medv variable.</description>
    </item>
    
    <item>
      <title>Data Frame</title>
      <link>/blog/2019/12/18/2019-12-19-data-frame/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/18/2019-12-19-data-frame/</guid>
      <description>Data FrameThis format is usually used when the information is not contained in just one dimension (vector)
Exampleproduct &amp;lt;- c(&amp;quot;Product A&amp;quot;, &amp;quot;Product B&amp;quot;, &amp;quot;Product C&amp;quot;, &amp;quot;Product D&amp;quot;, &amp;quot;Product E&amp;quot;)price &amp;lt;- c(5, 15, 4, 6, 8)table_price_product &amp;lt;- data.frame(product, price)table_price_product## product price## 1 Product A 5## 2 Product B 15## 3 Product C 4## 4 Product D 6## 5 Product E 8IndexingAccess the D Product in the Products Table:</description>
    </item>
    
    <item>
      <title>Exponential Smoothing Model</title>
      <link>/blog/2019/12/18/2019-12-21-exponential-smoothing-model/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/18/2019-12-21-exponential-smoothing-model/</guid>
      <description>IntroductionThe main idea here is breaking the ice in terms of exponential smoothing models
First of all it is importan to show some behaviours patterns usually found in time series
Trends: it is usually observed when the time series follow one specific direction. It can be linear or not.
Seasonality: it is a pattern that repeat in a certain times (specific period)
Cycle: Like seasonality but it appears in non specific time</description>
    </item>
    
    <item>
      <title>Linear Regression</title>
      <link>/blog/2019/12/18/2019-12-18-linear-regression/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/18/2019-12-18-linear-regression/</guid>
      <description>DataWe are using the MASS library that contains the Boston dataset. These records measure the median house value for 506 neighborhoods around Boston.
library(MASS)data &amp;lt;- MASS::Bostonfix(Boston)names(Boston)## [1] &amp;quot;crim&amp;quot; &amp;quot;zn&amp;quot; &amp;quot;indus&amp;quot; &amp;quot;chas&amp;quot; &amp;quot;nox&amp;quot; &amp;quot;rm&amp;quot; &amp;quot;age&amp;quot; ## [8] &amp;quot;dis&amp;quot; &amp;quot;rad&amp;quot; &amp;quot;tax&amp;quot; &amp;quot;ptratio&amp;quot; &amp;quot;black&amp;quot; &amp;quot;lstat&amp;quot; &amp;quot;medv&amp;quot;A simple Linear RegressionWe are using the lm() function to fit a simple linear regression model. The medv is a response variable and lstat the predictor variable.</description>
    </item>
    
    <item>
      <title>Linked post</title>
      <link>/blog/2015/10/02/linked-post/</link>
      <pubDate>Fri, 02 Oct 2015 21:49:20 +0200</pubDate>
      
      <guid>/blog/2015/10/02/linked-post/</guid>
      <description>I&#39;m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:
menu = &amp;quot;main&amp;quot; Lorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus.</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>/blog/2015/09/17/go-is-for-lovers/</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>/blog/2015/09/17/go-is-for-lovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Hugo is for lovers</title>
      <link>/blog/2015/08/03/hugo-is-for-lovers/</link>
      <pubDate>Mon, 03 Aug 2015 13:39:46 +0200</pubDate>
      
      <guid>/blog/2015/08/03/hugo-is-for-lovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/2015/07/23/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/2015/07/23/2015-07-23-r-rmarkdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a new theme</title>
      <link>/blog/2015/06/24/creating-a-new-theme/</link>
      <pubDate>Wed, 24 Jun 2015 13:50:46 +0200</pubDate>
      
      <guid>/blog/2015/06/24/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title></title>
      <link>/blog/1/01/01/including-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/1/01/01/including-plots/</guid>
      <description>2 Including Plots | Hello R Markdowna.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title></title>
      <link>/blog/1/01/01/r-markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/1/01/01/r-markdown/</guid>
      <description>Hello R Markdowna.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.numberSource a.sourceLine{ position: relative; left: -4em; }pre.</description>
    </item>
    
    <item>
      <title>Migrate from Jekyll</title>
      <link>/blog/1/01/01/migrate-from-jekyll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/1/01/01/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&#39;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>