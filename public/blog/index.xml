<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Universal</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Universal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary Search Algorithm</title>
      <link>/blog/2019/12/28/2019-12-28-binary-search/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/28/2019-12-28-binary-search/</guid>
      <description>def binary_search(lista, item):low = 0 # low and high are part of the list thar you are searching forhigh = len(lista) - 1while low &amp;lt;= high: #while you are not achieving one unique elementmiddle = (low + high) // 2 # checking the central elementguess = lista[middle]if guess == item:return middleif guess &amp;gt; item: # the guess are too highhigh = middle - 1else: # the guess are too lowlow = middle + 1return Nonemy_list = [1, 3, 5, 7, 9]print(binary_search(my_list, 3))## 1print(binary_search(my_list, -1))## None</description>
    </item>
    
    <item>
      <title>Quicksort Algorithm</title>
      <link>/blog/2019/12/26/2019-12-27-quicksort-algorithm/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/26/2019-12-27-quicksort-algorithm/</guid>
      <description>def quicksort(array):if len(array) &amp;lt; 2:return arrayelse:pivo = array[0] # caso recursivomenores = [i for i in array [1:] if i &amp;lt;= pivo] # subarray de todos os elementos menores do que o pivomaiores = [i for i in array[1:] if i &amp;gt; pivo] # subarray de todos os elementos maiores do que o pivoreturn quicksort(menores) + [pivo] + quicksort(maiores)print(quicksort([10, 5, 2, 3]))## [2, 3, 5, 10]</description>
    </item>
    
    <item>
      <title>R Packages for Regression</title>
      <link>/blog/2019/12/23/2019-12-23-r-packages-for-regression/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/23/2019-12-23-r-packages-for-regression/</guid>
      <description>R Packages for RegressionFor this post we will present some valuable R packages for using in regression studies. Check it out!
statsPackage very useful for statistical calculations and random number generations.
Below you can find the most useful function in regression area:
lm(): it is used to fit linear models
summary.lm(): thsi function returns a summary for linear model fits
coef(): it is possible obtain the coefficients from modeling functions</description>
    </item>
    
    <item>
      <title>Random Forest</title>
      <link>/blog/2019/12/23/2019-12-23-random-forest/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/23/2019-12-23-random-forest/</guid>
      <description>Random ForestIn this post we will explore some ideas around the Random Forest model
ObjectiveWe are working on in the dataset called Boston Housing and the main idea here is regression task and we are concerned with modeling the price of houses in thousands of dollars in the Surburb of Boston.
So, we are dirting our hands in a regression predictive modeling problem.
The main goal here is to fit a regression model that best explains the variation in medv variable.</description>
    </item>
    
    <item>
      <title>Data Frame</title>
      <link>/blog/2019/12/18/2019-12-19-data-frame/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/18/2019-12-19-data-frame/</guid>
      <description>Data FrameThis format is usually used when the information is not contained in just one dimension (vector)
Exampleproduct &amp;lt;- c(&amp;quot;Product A&amp;quot;, &amp;quot;Product B&amp;quot;, &amp;quot;Product C&amp;quot;, &amp;quot;Product D&amp;quot;, &amp;quot;Product E&amp;quot;)price &amp;lt;- c(5, 15, 4, 6, 8)table_price_product &amp;lt;- data.frame(product, price)table_price_product## product price## 1 Product A 5## 2 Product B 15## 3 Product C 4## 4 Product D 6## 5 Product E 8IndexingAccess the D Product in the Products Table:</description>
    </item>
    
    <item>
      <title>Exponential Smoothing Model</title>
      <link>/blog/2019/12/18/2019-12-21-exponential-smoothing-model/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/18/2019-12-21-exponential-smoothing-model/</guid>
      <description>IntroductionThe main idea here is breaking the ice in terms of exponential smoothing models
First of all it is importan to show some behaviours patterns usually found in time series
Trends: it is usually observed when the time series follow one specific direction. It can be linear or not.
Seasonality: it is a pattern that repeat in a certain times (specific period)
Cycle: Like seasonality but it appears in non specific time</description>
    </item>
    
    <item>
      <title>Linear Regression</title>
      <link>/blog/2019/12/18/2019-12-18-linear-regression/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/18/2019-12-18-linear-regression/</guid>
      <description>DataWe are using the MASS library that contains the Boston dataset. These records measure the median house value for 506 neighborhoods around Boston.
library(MASS)data &amp;lt;- MASS::Bostonfix(Boston)names(Boston)## [1] &amp;quot;crim&amp;quot; &amp;quot;zn&amp;quot; &amp;quot;indus&amp;quot; &amp;quot;chas&amp;quot; &amp;quot;nox&amp;quot; &amp;quot;rm&amp;quot; &amp;quot;age&amp;quot; ## [8] &amp;quot;dis&amp;quot; &amp;quot;rad&amp;quot; &amp;quot;tax&amp;quot; &amp;quot;ptratio&amp;quot; &amp;quot;black&amp;quot; &amp;quot;lstat&amp;quot; &amp;quot;medv&amp;quot;A simple Linear RegressionWe are using the lm() function to fit a simple linear regression model. The medv is a response variable and lstat the predictor variable.</description>
    </item>
    
    <item>
      <title>Linked post</title>
      <link>/blog/2015/10/02/linked-post/</link>
      <pubDate>Fri, 02 Oct 2015 21:49:20 +0200</pubDate>
      
      <guid>/blog/2015/10/02/linked-post/</guid>
      <description>I&#39;m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:
menu = &amp;quot;main&amp;quot;  Lorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus.</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>/blog/2015/09/17/go-is-for-lovers/</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>/blog/2015/09/17/go-is-for-lovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Hugo is for lovers</title>
      <link>/blog/2015/08/03/hugo-is-for-lovers/</link>
      <pubDate>Mon, 03 Aug 2015 13:39:46 +0200</pubDate>
      
      <guid>/blog/2015/08/03/hugo-is-for-lovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/2015/07/23/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/2015/07/23/2015-07-23-r-rmarkdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a new theme</title>
      <link>/blog/2015/06/24/creating-a-new-theme/</link>
      <pubDate>Wed, 24 Jun 2015 13:50:46 +0200</pubDate>
      
      <guid>/blog/2015/06/24/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title></title>
      <link>/blog/1/01/01/including-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/1/01/01/including-plots/</guid>
      <description>2 Including Plots | Hello R Markdowna.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title></title>
      <link>/blog/1/01/01/r-markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/1/01/01/r-markdown/</guid>
      <description>Hello R Markdowna.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.numberSource a.sourceLine{ position: relative; left: -4em; }pre.</description>
    </item>
    
    <item>
      <title>Migrate from Jekyll</title>
      <link>/blog/1/01/01/migrate-from-jekyll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/1/01/01/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&#39;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>