<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on DFS</title>
    <link>/categories/programming/</link>
    <description>Recent content in programming on DFS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary Search Algorithm</title>
      <link>/blog/2019/12/28/2019-12-28-binary-search/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/28/2019-12-28-binary-search/</guid>
      <description>def binary_search(lista, item):low = 0 # low and high are part of the list thar you are searching forhigh = len(lista) - 1while low &amp;lt;= high: #while you are not achieving one unique elementmiddle = (low + high) // 2 # checking the central elementguess = lista[middle]if guess == item:return middleif guess &amp;gt; item: # the guess are too highhigh = middle - 1else: # the guess are too lowlow = middle + 1return Nonemy_list = [1, 3, 5, 7, 9]print(binary_search(my_list, 3))## 1print(binary_search(my_list, -1))## None</description>
    </item>
    
    <item>
      <title>Quicksort Algorithm</title>
      <link>/blog/2019/12/26/2019-12-27-quicksort-algorithm/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/26/2019-12-27-quicksort-algorithm/</guid>
      <description>def quicksort(array):if len(array) &amp;lt; 2:return arrayelse:pivo = array[0] # caso recursivomenores = [i for i in array [1:] if i &amp;lt;= pivo] # subarray de todos os elementos menores do que o pivomaiores = [i for i in array[1:] if i &amp;gt; pivo] # subarray de todos os elementos maiores do que o pivoreturn quicksort(menores) + [pivo] + quicksort(maiores)print(quicksort([10, 5, 2, 3]))## [2, 3, 5, 10]</description>
    </item>
    
    <item>
      <title>R Packages for Regression</title>
      <link>/blog/2019/12/23/2019-12-23-r-packages-for-regression/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/23/2019-12-23-r-packages-for-regression/</guid>
      <description>R Packages for RegressionFor this post we will present some valuable R packages for using in regression studies. Check it out!
statsPackage very useful for statistical calculations and random number generations.
Below you can find the most useful function in regression area:
lm(): it is used to fit linear models
summary.lm(): thsi function returns a summary for linear model fits
coef(): it is possible obtain the coefficients from modeling functions</description>
    </item>
    
    <item>
      <title>Random Forest</title>
      <link>/blog/2019/12/23/2019-12-23-random-forest/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/12/23/2019-12-23-random-forest/</guid>
      <description>Random ForestIn this post we will explore some ideas around the Random Forest model
ObjectiveWe are working on in the dataset called Boston Housing and the main idea here is regression task and we are concerned with modeling the price of houses in thousands of dollars in the Surburb of Boston.
So, we are dirting our hands in a regression predictive modeling problem.
The main goal here is to fit a regression model that best explains the variation in medv variable.</description>
    </item>
    
    <item>
      <title>Linked post</title>
      <link>/blog/2015/10/02/linked-post/</link>
      <pubDate>Fri, 02 Oct 2015 21:49:20 +0200</pubDate>
      
      <guid>/blog/2015/10/02/linked-post/</guid>
      <description>I&amp;rsquo;m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:
menu = &amp;quot;main&amp;quot;  Lorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus.</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>/blog/2015/09/17/go-is-for-lovers/</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>/blog/2015/09/17/go-is-for-lovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
  </channel>
</rss>