<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science on DFS</title>
    <link>/categories/data-science/</link>
    <description>Recent content in Data Science on DFS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/data-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Credit Card Fraud Detection</title>
      <link>/blog/2020/03/26/2020-03-26-credit-card-fraud-detection/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/26/2020-03-26-credit-card-fraud-detection/</guid>
      <description>ObjectiveOur goal is to train a Neural Network to detect fraudulent credit card transactions in a dataset referring to two days transactions by european cardholders.
Source: https://www.kaggle.com/mlg-ulb/creditcardfraud/data
Datacredit = read.csv(path)The datasets contains transactions made by credit cards in September 2013 by european cardholders.This dataset presents transactions that occurred in two days.
As we can see, this dataset consists of thirty explanatory variables, and a response variable which represents whether a transation was a fraud or not.</description>
    </item>
    
    <item>
      <title>Intermediate Importing Data in Python</title>
      <link>/blog/2020/03/21/2020-03-21-intermediate-importing-data-in-python/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/21/2020-03-21-intermediate-importing-data-in-python/</guid>
      <description>1. Importing flat files from the web: your turn!# Import packagefrom urllib.request import urlretrieve# Import pandasimport pandas as pd# Assign url of file: urlurl = &amp;#39;https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/datasets/winequality-red.csv&amp;#39;# Save file locallyurlretrieve(url, &amp;#39;winequality-red.csv&amp;#39;)# Read file into a DataFrame and print its head## (&amp;#39;winequality-red.csv&amp;#39;, &amp;lt;http.client.HTTPMessage object at 0x000000001FBF52C8&amp;gt;)df = pd.read_csv(&amp;#39;winequality-red.csv&amp;#39;, sep=&amp;#39;;&amp;#39;)print(df.head())## fixed acidity volatile acidity citric acid ... sulphates alcohol quality## 0 7.</description>
    </item>
    
    <item>
      <title>Introduction to Importing Data in Python</title>
      <link>/blog/2020/03/19/2020-03-19-introduction-to-importing-data-in-python/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/19/2020-03-19-introduction-to-importing-data-in-python/</guid>
      <description>1. Importing entire text files# Open a file: filefile = open(&amp;#39;c:/blogdown/moby_dick.txt&amp;#39;, mode=&amp;#39;r&amp;#39;)# Print itprint(file.read())# Check whether file is closed## CHAPTER 1. Loomings.## ## Call me Ishmael. Some years ago--never mind how long precisely--having## little or no money in my purse, and nothing particular to interest me on## shore, I thought I would sail about a little and see the watery part of## the world.</description>
    </item>
    
    <item>
      <title>Supervised Learning with Scikit-Learn</title>
      <link>/blog/2020/03/18/2020-03-18-supervised-learning-with-scikit-learn/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/18/2020-03-18-supervised-learning-with-scikit-learn/</guid>
      <description>1. The Iris dataset in scikit-learnfrom sklearn import datasetsimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltplt.style.use(&amp;#39;ggplot&amp;#39;)iris = datasets.load_iris()type(iris)## &amp;lt;class &amp;#39;sklearn.utils.Bunch&amp;#39;&amp;gt;print(iris.keys())## dict_keys([&amp;#39;data&amp;#39;, &amp;#39;target&amp;#39;, &amp;#39;target_names&amp;#39;, &amp;#39;DESCR&amp;#39;, &amp;#39;feature_names&amp;#39;, &amp;#39;filename&amp;#39;])print(iris.DESCR)## .. _iris_dataset:## ## Iris plants dataset## --------------------## ## **Data Set Characteristics:**## ## :Number of Instances: 150 (50 in each of three classes)## :Number of Attributes: 4 numeric, predictive attributes and the class## :Attribute Information:## - sepal length in cm## - sepal width in cm## - petal length in cm## - petal width in cm## - class:## - Iris-Setosa## - Iris-Versicolour## - Iris-Virginica## ## :Summary Statistics:## ## ============== ==== ==== ======= ===== ====================## Min Max Mean SD Class Correlation## ============== ==== ==== ======= ===== ====================## sepal length: 4.</description>
    </item>
    
    <item>
      <title>Python Data Science - part 1</title>
      <link>/blog/2020/03/15/2020-03-15-python-data-science-part-1/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/03/15/2020-03-15-python-data-science-part-1/</guid>
      <description>1. Single Parameter Function# Define shout with the parameter, worddef shout(word):&amp;quot;&amp;quot;&amp;quot;Print a string with three exclamation marks&amp;quot;&amp;quot;&amp;quot;# Concatenate the strings: shout_wordshout_word = word + &amp;#39;!!!&amp;#39;# Print shout_wordprint(shout_word)# Call shout with the string &amp;#39;congratulations&amp;#39;shout(&amp;quot;Congratulations&amp;quot;)## Congratulations!!!2. Functions that return single values# Define shout with the parameter, worddef shout(word):&amp;quot;&amp;quot;&amp;quot;Return a string with three exclamation marks&amp;quot;&amp;quot;&amp;quot;# Concatenate the strings: shout_wordshout_word = word + &amp;quot;!</description>
    </item>
    
  </channel>
</rss>